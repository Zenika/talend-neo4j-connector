<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument 
		org.talend.core.model.metadata.types.JavaTypesManager 
		org.talend.core.model.metadata.types.JavaType 
		org.talend.designer.neo4j.data.Neo4jData 
		org.talend.designer.neo4j.data.Index 
		org.talend.designer.neo4j.data.Relationship 
		org.talend.designer.neo4j.ui.editor.MetadataColumnExt 
		java.util.List 
		java.util.ArrayList 
		java.util.HashMap 
    	java.util.Map 
	" 
%>	
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    final INode node = (INode)codeGenArgument.getArgument();
    final String cid = node.getUniqueName();
    String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    
    if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		columnList = metadata.getListColumns();
    	}
    }	
    
    List<? extends IConnection> inputs = node.getIncomingConnections();
    List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
    String incomingConnName = null;
    String outgoingConnName = null;
    
    if (inputs.size() > 0) {
    	IConnection in = inputs.get(0);
    	incomingConnName = in.getName();
    }
    
    if (outputs.size() > 0) {
    	IConnection out = outputs.get(0);
    	outgoingConnName = out.getName();
    }
    for (IMetadataColumn column : columnList) {
	    if (outgoingConnName != null) {
	    	%>
	    	<%=outgoingConnName%>.<%=column%> = <%=incomingConnName%>.<%=column%>;
	    	<%
		}
    }
    
    class Neo4jUtils {
		
		private List<IMetadataColumn> columnList;
		private String incomingConnName;
		
		public Neo4jUtils(String incomingConnName, List<IMetadataColumn> columnList) {
			this.incomingConnName = incomingConnName;
			this.columnList = columnList;
		}
		
		public void generateNodeInsert() {
			%>
			org.neo4j.graphdb.Node node = databaseService_<%=cid%>.createNode();
			<%
			generateNode();
		}
		
		public void generateNodeInsertOrUpdate() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node = indexNode_<%=indexName%>.get("<%=indexKey%>", <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node == null) {
				node = databaseService_<%=cid%>.createNode();
			}
			<%
			generateNode();
		}
		
		public void generateNodeUpdate() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node = indexNode_<%=indexName%>.get("<%=indexKey%>", <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node == null) {
				throw new RuntimeException("Node not found");
			}
			<%
			generateNode();
		}
		
		public void generateNodeDelete() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node = indexNode_<%=indexName%>.get("<%=indexKey%>", <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node != null) {
				if (indexNode_<%=indexName%>.isWriteable()) {
					indexNode_<%=indexName%>.remove(node);
				}
				if (node.hasRelationship()) {
					for (org.neo4j.graphdb.Relationship relationship : node.getRelationships(org.neo4j.graphdb.Direction.BOTH)) {
						relationship.delete();
					}
				}
				node.delete();
			}
			<%
		}

		private void generateNode() {
			for (IMetadataColumn column : columnList) {
		    	generateNodePropertyInsert(column);
		    	if (column instanceof MetadataColumnExt) {
		    		MetadataColumnExt columnExt = (MetadataColumnExt) column;
		    		Neo4jData data = columnExt.getData();
		    		for (Index index : data.getIndexes()) {
		    			generateIndexCreation(index, column);
		    		}
		    		for (Relationship relationship : data.getRelationships()) {
		    			generateRelationshipCreation(relationship, column);
		    		}
		    	}
		    }
		}
	
		private void generateNodePropertyInsert(IMetadataColumn column) {
			if (column.getTalendType().equals("id_Date")) {
	    		%>
	    		if (<%=incomingConnName%>.<%=column%> != null) {
	    			java.util.Date date = (java.util.Date) <%=incomingConnName%>.<%=column%>;
	    			node.setProperty("<%=column%>", date.getTime());
	    		}
	    		<%
    		} else {
		    	if (column.isNullable()) {
			    	%>
		    		if (<%=incomingConnName%>.<%=column%> != null) {
		    			node.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
		    		}
			    	<%
		    	} else {
			    	%>
			    		node.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
			    	<%
		    	}
		    }
		}


		private void generateIndexCreation(Index index, IMetadataColumn column) {
			boolean fromValueColumn = index.getValue() == null || index.getValue().isEmpty();
			if (fromValueColumn) {
				%>		    				
				indexNode_<%=index.getName()%>.add(node, "<%=index.getKey()%>", <%=incomingConnName%>.<%=column%>);		    			
				<%
			} else if (fromValueColumn && index.isUnique()){
				%>
				indexNode_<%=index.getName()%>.putIfAbsent(node, "<%=index.getKey()%>", <%=incomingConnName%>.<%=column%>);
				<%
			} else if (index.isUnique()) {
				%>
				indexNode_<%=index.getName()%>.putIfAbsent(node, "<%=index.getKey()%>", "<%=index.getValue()%>");
				<%
			} else {
				%>
				indexNode_<%=index.getName()%>.add(node, "<%=index.getKey()%>", "<%=index.getValue()%>");				
				<%
			}
		}
		
		private void generateRelationshipCreation(Relationship relationship, IMetadataColumn column) {
			%>
			org.neo4j.graphdb.Node endNode_<%=relationship.getIndexName()%> = null;
			<%
			if (relationship.getValue() != null && !relationship.getValue().isEmpty()) {
			%>
				endNode_<%=relationship.getIndexName()%> = indexNode_<%=relationship.getIndexName()%>.get("<%=relationship.getKey()%>", "<%=relationship.getValue()%>").getSingle();
			<%
			} else if (column.isNullable()) {
			%>
				if (<%=incomingConnName%>.<%=column%> != null) {
					endNode_<%=relationship.getIndexName()%> = indexNode_<%=relationship.getIndexName()%>.get("<%=relationship.getKey()%>", <%=incomingConnName%>.<%=column%>).getSingle();
				}
			<%
			} else {
				%>
				endNode_<%=relationship.getIndexName()%> = indexNode_<%=relationship.getIndexName()%>.get("<%=relationship.getKey()%>", <%=incomingConnName%>.<%=column%>).getSingle();
				<%
			}
			%>
			if (endNode_<%=relationship.getIndexName()%> != null) {
				<%
				switch (relationship.getDirection()) {
					case OUTGOING :
						%>		 	
	    				node.createRelationshipTo(endNode_<%=relationship.getIndexName()%>, org.neo4j.graphdb.DynamicRelationshipType.withName("<%=relationship.getType()%>"));
						<%
						break;
					case INCOMMING :
						%>
						endNode_<%=relationship.getIndexName()%>.createRelationshipTo(node, org.neo4j.graphdb.DynamicRelationshipType.withName("<%=relationship.getType()%>"));
						<%
						break;
				}
				%>			
			}
			<%
		}
	}
    
    Neo4jUtils neo4jUtils = new Neo4jUtils(incomingConnName, columnList);
    if (dataAction.equals("INSERT")) {
	    neo4jUtils.generateNodeInsert();
	} else if (dataAction.equals("INSERT_OR_UPDATE")) {
		neo4jUtils.generateNodeInsertOrUpdate();
	} else if (dataAction.equals("UPDATE")) {
		neo4jUtils.generateNodeUpdate();
	} else if (dataAction.equals("DELETE")) {
		neo4jUtils.generateNodeDelete();
	}
%>
if (counter % Long.parseLong(<%=commitEvery%>) == 0) {
	tx.success();
	tx.finish();
	tx = databaseService_<%=cid%>.beginTx();
}
counter++;
++nb_line_<%=cid %>;