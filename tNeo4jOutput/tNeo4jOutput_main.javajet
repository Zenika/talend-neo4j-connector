<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument 
		org.talend.core.model.metadata.types.JavaTypesManager 
		org.talend.core.model.metadata.types.JavaType 
		org.talend.designer.neo4j.data.Neo4jData 
		org.talend.designer.neo4j.data.Index 
		org.talend.designer.neo4j.data.Relationship 
		org.talend.designer.neo4j.ui.editor.MetadataColumnExt 
		java.util.List 
		java.util.ArrayList 
		java.util.HashMap 
    	java.util.Map 
	" 
%>	
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    final INode node = (INode)codeGenArgument.getArgument();
    final String cid = node.getUniqueName();
    String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    
    if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		columnList = metadata.getListColumns();
    	}
    }	
    
    List<? extends IConnection> inputs = node.getIncomingConnections();
    List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
    String incomingConnName = null;
    String outgoingConnName = null;
    
    if (inputs.size() > 0) {
    	IConnection in = inputs.get(0);
    	incomingConnName = in.getName();
    }
    
    if (outputs.size() > 0) {
    	IConnection out = outputs.get(0);
    	outgoingConnName = out.getName();
    }
    for (IMetadataColumn column : columnList) {
	    if (outgoingConnName != null) {
	    	%>
	    	<%=outgoingConnName%>.<%=column%> = <%=incomingConnName%>.<%=column%>;
	    	<%
		}
    }
    
    class Neo4jUtils {
		
		private List<IMetadataColumn> columnList;
		private String incomingConnName;
		
		public Neo4jUtils(String incomingConnName, List<IMetadataColumn> columnList) {
			this.incomingConnName = incomingConnName;
			this.columnList = columnList;
		}
		
		public void generateNodeInsert() {
			%>
			org.neo4j.graphdb.Node node_<%=cid%> = databaseService_<%=cid%>.createNode();
			<%
			generateNode();
		}
		
		public void generateNodeInsertOrUpdate() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node_<%=cid%> = indexNodeMap_<%=cid%>.get(<%=indexName%>).get(<%=indexKey%>, <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node_<%=cid%> == null) {
				node_<%=cid%> = databaseService_<%=cid%>.createNode();
			}
			<%
			generateNode();
		}
		
		public void generateNodeUpdate() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node_<%=cid%> = indexNodeMap_<%=cid%>.get(<%=indexName%>).get(<%=indexKey%>, <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node_<%=cid%> == null) {
				throw new RuntimeException("Node not found");
			}
			<%
			generateNode();
		}
		
		public void generateNodeDelete() {
			String indexName = ElementParameterParser.getValue(node, "__INDEX_NAME__");
			String indexKey = ElementParameterParser.getValue(node, "__INDEX_KEY__");
			String indexColumnValue = ElementParameterParser.getValue(node, "__INDEX_VALUE__");
			%>
			org.neo4j.graphdb.Node node_<%=cid%> = indexNodeMap_<%=cid%>.get(<%=indexName%>).get(<%=indexKey%>, <%=incomingConnName%>.<%=indexColumnValue%>).getSingle();
			if (node_<%=cid%> != null) {
				if (indexNodeMap_<%=cid%>.get(<%=indexName%>).isWriteable()) {
					indexNodeMap_<%=cid%>.get(<%=indexName%>).remove(node_<%=cid%>);
				}
				if (node_<%=cid%>.hasRelationship()) {
					for (org.neo4j.graphdb.Relationship relationship_<%=cid%> : node_<%=cid%>.getRelationships(org.neo4j.graphdb.Direction.BOTH)) {
						relationship_<%=cid%>.delete();
					}
				}
				node_<%=cid%>.delete();
			}
			<%
		}

		private void generateNode() {
			for (IMetadataColumn column : columnList) {		    	
		    	if (column instanceof MetadataColumnExt) {		    		
		    		MetadataColumnExt columnExt = (MetadataColumnExt) column;		    		
		    		Neo4jData data = columnExt.getData();
		    		generateNodePropertyInsert(column);
		    		for (Index index : data.getIndexes()) {
		    			generateIndexCreation(index, column);
		    		}
		    		for (Relationship relationship : data.getRelationships()) {
		    			generateRelationshipCreation(relationship, column);
		    		}
		    	}
		    }
		}
	
		private void generateNodePropertyInsert(IMetadataColumn column) {
			if (column.getTalendType().equals("id_Date")) {
	    		%>
	    		if (<%=incomingConnName%>.<%=column%> != null) {
	    			java.util.Date date_<%=cid%> = (java.util.Date) <%=incomingConnName%>.<%=column%>;
	    			node_<%=cid%>.setProperty("<%=column%>", date_<%=cid%>.getTime());
	    		}
	    		<%
    		} else {
		    	if (column.isNullable()) {
			    	%>
		    		if (<%=incomingConnName%>.<%=column%> != null) {
		    			node_<%=cid%>.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
		    		}
			    	<%
		    	} else {
			    	%>
		    		node_<%=cid%>.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
	    			<%
		    	}
		    }
		}


		private void generateIndexCreation(Index index, IMetadataColumn column) {
			boolean fromValueColumn = index.getValue() == null || index.getValue().isEmpty();
			if (fromValueColumn) {
				%>		    				
				indexNodeMap_<%=cid%>.get(<%=index.getName()%>).add(node_<%=cid%>, <%=index.getKey()%>, <%=incomingConnName%>.<%=column%>);		    			
				<%
			} else if (fromValueColumn && index.isUnique()){
				%>
				indexNodeMap_<%=cid%>.get(<%=index.getName()%>).putIfAbsent(node_<%=cid%>, <%=index.getKey()%>, <%=incomingConnName%>.<%=column%>);
				<%
			} else if (index.isUnique()) {
				%>
				indexNodeMap_<%=cid%>.get(<%=index.getName()%>).putIfAbsent(node_<%=cid%>, <%=index.getKey()%>, <%=index.getValue()%>);
				<%
			} else {
				%>
				indexNodeMap_<%=cid%>.get(<%=index.getName()%>).add(node_<%=cid%>, <%=index.getKey()%>, <%=index.getValue()%>);				
				<%
			}
		}
		
		private void generateRelationshipCreation(Relationship relationship, IMetadataColumn column) {
			%>
			java.util.Map<String, org.neo4j.graphdb.Node> endNode_<%=cid%> = new java.util.HashMap<String,org.neo4j.graphdb.Node>();
			<%
			if (relationship.getIndex().getValue() != null && !relationship.getIndex().getValue().isEmpty()) {
			%>
				endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexNodeMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=relationship.getIndex().getValue()%>).getSingle());
			<%
			} else if (column.isNullable()) {
			%>
				if (<%=incomingConnName%>.<%=column%> != null) {
					endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexNodeMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
				}
			<%
			} else {
				%>
				endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexNodeMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
				<%
			}
			%>
			if (endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>) != null) {
				<%
				switch (relationship.getDirection()) {
					case OUTGOING :
						%>		 	
	    				node_<%=cid%>.createRelationshipTo(endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>), org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>));
						<%
						break;
					case INCOMING :
						%>
						endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>).createRelationshipTo(node_<%=cid%>, org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>));
						<%
						break;
				}
				%>			
			}
			<%
		}
	}
    
    class Neo4jBatchUtils {
    	private List<IMetadataColumn> columnList;
		private String incomingConnName;
		
		public Neo4jBatchUtils(String incomingConnName, List<IMetadataColumn> columnList) {
			this.incomingConnName = incomingConnName;
			this.columnList = columnList;
		}
		
		public void generateNodeBatchInsert() {
			%>
			java.util.Map<String, Object> properties_<%=cid%> = new java.util.HashMap<String, Object>();
			<%
			for (IMetadataColumn column : columnList) {		
	    		putBatchPropertyInsertInMap(column);
		    }
		    // Must compute all properties before node creation for best performances
		    generateNode();
		    for (IMetadataColumn column : columnList) {
		    	if (column instanceof MetadataColumnExt) {		    		
		    		MetadataColumnExt columnExt = (MetadataColumnExt) column;		    		
		    		Neo4jData data = columnExt.getData();
		    		for (Index index : data.getIndexes()) {
		    			generateIndexCreation(index, column);
		    		}		    		
		    		for (Relationship relationship : data.getRelationships()) {
		    			generateRelationshipCreation(relationship, column);
		    		}
		    	}
	    	}
		}
		
		private void putBatchPropertyInsertInMap(IMetadataColumn column) {
			if (column.getTalendType().equals("id_Date")) {
	    		%>
	    		if (<%=incomingConnName%>.<%=column%> != null) {
	    			java.util.Date date_<%=cid%> = (java.util.Date) <%=incomingConnName%>.<%=column%>;
	    			properties_<%=cid%>.put("<%=column%>", date_<%=cid%>.getTime());
	    		}
	    		<%
    		} else {
		    	if (column.isNullable()) {
			    	%>
		    		if (<%=incomingConnName%>.<%=column%> != null) {
		    			properties_<%=cid%>.put("<%=column%>", <%=incomingConnName%>.<%=column%>);
		    		}
			    	<%
		    	} else {
			    	%>
		    		properties_<%=cid%>.put("<%=column%>", <%=incomingConnName%>.<%=column%>);
		    		<%
		    	}
		    }
		}
		
		private void generateNode() {
			%>
			long node_<%=cid%> = inserter_<%=cid%>.createNode(properties_<%=cid%>);			
			<%
		}
		
		private void generateIndexCreation(Index index, IMetadataColumn column) {
			boolean fromValueColumn = index.getValue() == null || index.getValue().isEmpty();
			%>
			java.util.Map<String, Object> indexProperties_<%=cid%> = new java.util.HashMap<String, Object>();
			java.util.Map<String, java.util.Map<String, Object>> indexPropertiesMap_<%=cid%> = new java.util.HashMap<String, java.util.Map<String, Object>>();
			<%
			if (fromValueColumn) {
				%>	    
				indexProperties_<%=cid%>.put(<%=index.getKey()%>, <%=incomingConnName%>.<%=column%>);
				<%
			} else {
				%>		
				indexProperties_<%=cid%>.put(<%=index.getKey()%>, <%=index.getValue()%>);
				<%
			}
			%>
				indexPropertiesMap_<%=cid%>.put(<%=index.getName()%>, indexProperties_<%=cid%>);
			<%
			
			if (index.isUnique()) {
				%>
				indexInserterMap_<%=cid%>.get(<%=index.getName()%>).updateOrAdd(node_<%=cid%>, indexPropertiesMap_<%=cid%>.get(<%=index.getName()%>));
				<%
			} else {
				%>
				indexInserterMap_<%=cid%>.get(<%=index.getName()%>).add(node_<%=cid%>, indexPropertiesMap_<%=cid%>.get(<%=index.getName()%>));			
				<%
			}
		}
		
		private void generateRelationshipCreation(Relationship relationship, IMetadataColumn column) {
			%>
			java.util.Map<String, Long> endNode_<%=cid%> = new java.util.HashMap<String,Long>();
			endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, 0L);
			<%
			if (relationship.getIndex().getValue() != null && !relationship.getIndex().getValue().isEmpty()) {
			%>
				endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=relationship.getIndex().getValue()%>).getSingle());
			<%
			} else if (column.isNullable()) {
			%>
				if (<%=incomingConnName%>.<%=column%> != null) {
					endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
				}
			<%
			} else {
				%>
				endNode_<%=cid%>.put(<%=relationship.getIndex().getName()%>, indexInserterMap_<%=cid%>.get(<%=relationship.getIndex().getName()%>).get(<%=relationship.getIndex().getKey()%>, <%=incomingConnName%>.<%=column%>).getSingle());
				<%
			}
			switch (relationship.getDirection()) {
				case OUTGOING :
					%>		 	
    				inserter_<%=cid%>.createRelationship(node_<%=cid%>, endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>), org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>), null);
					<%
					break;
				case INCOMING :
					%>
					inserter_<%=cid%>.createRelationship(endNode_<%=cid%>.get(<%=relationship.getIndex().getName()%>), node_<%=cid%>, org.neo4j.graphdb.DynamicRelationshipType.withName(<%=relationship.getType()%>), null);
					<%
					break;
			}
		}
    }
    
    if (batchImport) {
    	Neo4jBatchUtils neo4jBatchUtils = new Neo4jBatchUtils(incomingConnName, columnList);
    	neo4jBatchUtils.generateNodeBatchInsert();
    } else {
    	Neo4jUtils neo4jUtils = new Neo4jUtils(incomingConnName, columnList);
	    if (dataAction.equals("INSERT")) {
		    neo4jUtils.generateNodeInsert();
		} else if (dataAction.equals("INSERT_OR_UPDATE")) {
			neo4jUtils.generateNodeInsertOrUpdate();
		} else if (dataAction.equals("UPDATE")) {
			neo4jUtils.generateNodeUpdate();
		} else if (dataAction.equals("DELETE")) {
			neo4jUtils.generateNodeDelete();
		}
	}
%>

counter_<%=cid%>++;

if (counter_<%=cid%> % Long.parseLong(<%=commitEvery%>) == 0) {
	tx_<%=cid%>.success();
	tx_<%=cid%>.finish();
	tx_<%=cid%> = databaseService_<%=cid%>.beginTx();
}

nb_line_<%=cid %>++;