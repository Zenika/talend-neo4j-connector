<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection 
		org.talend.core.model.process.IConnectionCategory 
		org.talend.designer.codegen.config.CodeGeneratorArgument 
		org.talend.core.model.metadata.types.JavaTypesManager 
		org.talend.core.model.metadata.types.JavaType 
		org.talend.designer.neo4j.data.Index 
		org.talend.designer.neo4j.data.Relationship 
		org.talend.designer.neo4j.ui.editor.MetadataColumnExt 
		java.util.List 
		java.util.ArrayList 
		java.util.HashMap 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
    
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    
    if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		columnList = metadata.getListColumns();
    	}
    }	
    
    List<? extends IConnection> inputs = node.getIncomingConnections();
    List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
    String incomingConnName = null;
    String outgoingConnName = null;
    
    if (inputs.size() > 0) {
    	IConnection in = inputs.get(0);
    	incomingConnName = in.getName();
    }
    
    if (outputs.size() > 0) {
    	IConnection out = outputs.get(0);
    	outgoingConnName = out.getName();
    }
    
    %>    
    org.neo4j.graphdb.Node node = databaseService_<%=cid%>.createNode();
    <%
    
    for (IMetadataColumn column : columnList) {
    	if (outgoingConnName != null) {
    	%>
    	<%=outgoingConnName%>.<%=column%> = <%=incomingConnName%>.<%=column%>;
    	<%
    	}
    	if (column.isNullable()) {
    	%>
    		if (<%=incomingConnName%>.<%=column%> != null) {
    			node.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
    		}
    	<%
    	} else {
    	%>
    		node.setProperty("<%=column%>", <%=incomingConnName%>.<%=column%>);
    	<%
    	}
    	if (column instanceof MetadataColumnExt) {
    		MetadataColumnExt columnExt = (MetadataColumnExt) column;
    		for (Index index : columnExt.getIndexes()) {
    			%>
    			{
	    			org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> indexNode_<%=index.getName()%> = databaseService_<%=cid%>.index().forNodes("<%=index.getName()%>");
	    			<%
	    			if (index.getValue() == null || index.getValue().isEmpty()) {
					%>		    				
						indexNode_<%=index.getName()%>.add(node, "<%=index.getKey()%>", <%=incomingConnName%>.<%=column%>);		    			
					<%
	    			} else {
					%>
						indexNode_<%=index.getName()%>.add(node, "<%=index.getKey()%>", "<%=index.getValue()%>");				
					<%
	    			}
	    			%>
    			}
    			<%
    		}
    		for (Relationship relationship : columnExt.getRelationships()) {
    			%>
    			{
    				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> indexNode = databaseService_<%=cid%>.index().forNodes("<%=relationship.getIndexName()%>");
    				org.neo4j.graphdb.Node endNode = null;
    				<%
    				if (relationship.getValue() != null && !relationship.getValue().isEmpty()) {
    				%>
    					endNode = indexNode.get("<%=relationship.getKey()%>", "<%=relationship.getValue()%>").getSingle();
    				<%
    				} else if (column.isNullable()) {
    				%>
    					if (<%=incomingConnName%>.<%=column%> != null) {
    						endNode = indexNode.get("<%=relationship.getKey()%>", <%=incomingConnName%>.<%=column%>).getSingle();
    					}
    				<%
    				} else {
    				%>
    					endNode = indexNode.get("<%=relationship.getKey()%>", <%=incomingConnName%>.<%=column%>).getSingle();
    				<%
    				}
    				%>
    				if (endNode != null) {
    					<%
    					switch (relationship.getDirection()) {    					
    						case OUTGOING :
	    						%>		 	
			    				node.createRelationshipTo(endNode, new org.neo4j.graphdb.RelationshipType() {          	
			            			public String name() {
										return "<%=relationship.getType()%>";
									}
								});
								<%
								break;
							case INCOMMING :
								%>
								endNode.createRelationshipTo(node, new org.neo4j.graphdb.RelationshipType() {          	
			            			public String name() {
										return "<%=relationship.getType()%>";
									}
								});
								<%
								break;
						}
						%>			
					}
    			}
    			<%
    		}
    	}
    }
%>
if (counter % 30000 == 0) {
	tx.success();
	tx.finish();
	tx = databaseService_<%=cid%>.beginTx();
}
counter++;
++nb_line_<%=cid %>;