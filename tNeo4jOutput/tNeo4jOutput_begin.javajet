<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.designer.neo4j.data.Neo4jData
		java.util.List 
    	java.util.Map 
    	java.util.ArrayList	
    	java.util.HashSet 
    	java.util.Arrays 
    	java.util.Set 
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    List<Map<String, String>> values = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__VALUES__");
    
    List<String> autoIndexedColumns = new ArrayList<String>();
    Set<String> indexNames = new HashSet();
    for (Map<String, String> value : values) {
    	System.out.println("Value: " + value);
    	boolean autoIndexed = Boolean.valueOf(value.get("AUTO_INDEXED"));
   		if (autoIndexed) {
   			autoIndexedColumns.add(value.get("SCHEMA_COLUMN"));
   		}
   		
   		String strIndexNames = value.get("INDEX_NAMES");
   		if (strIndexNames != null && !strIndexNames.isEmpty()) {
   			indexNames.addAll(Arrays.asList(strIndexNames.split(",")));
   		}
    }
    
    %>
    java.util.Map<String, org.neo4j.graphdb.Node> cachedNodes = null;
    <%
    
    for (Map<String, String> value : values) {
    	boolean cacheNode = Boolean.valueOf(value.get("CACHE_NODE"));
    	if (cacheNode) {
    		%>
    		cachedNodes = new java.util.HashMap<String, org.neo4j.graphdb.Node>();
    		<%
    		break;
    	}
    }
    
    // Add update/delete index
    String action = (String) ElementParameterParser.getObjectValue(node, "__DATA_ACTION__");
    if (!action.equals("INSERT")) {
    	indexNames.add((String) ElementParameterParser.getObjectValue(node, "__INDEX_NAME__"));
    }
    
    if (useExistingConnection) {
    	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    	String dbconn = "dbService_" + connection;
    	if (batchImport) {
    		%>
    		//org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = (org.neo4j.graphdb.GraphDatabaseService) globalMap.get("<%=dbconn%>");
    		//String storeDir = "";
    		//if (databaseService_<%=cid%> instanceof org.neo4j.kernel.EmbeddedGraphDatabase) {
    			//org.neo4j.kernel.EmbeddedGraphDatabase db = (org.neo4j.kernel.EmbeddedGraphDatabase) databaseService_<%=cid%>;
    			//storeDir = db.getStoreDir();
    			//db.shutdown();
    			//databaseService_<%=cid%> = org.neo4j.unsafe.batchinsert.BatchInserters.batchDatabase(db.getStoreDir());
    		//} else {
    			//throw new UnsupportedOperationException("Not supported yet");
    		//}
    		org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = (org.neo4j.graphdb.GraphDatabaseService) globalMap.get("<%=dbconn%>");
    		<%
    		boolean useCachedNodeSource = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_CACHED_NODE__"));
    		if (useCachedNodeSource) {
	    		String cachedNodeSource = ElementParameterParser.getValue(node, "__CACHED_NODE_SOURCE__");
	    		%>
	    		java.util.Map<String, org.neo4j.graphdb.Node> cachedNodes_<%=cid%> = (java.util.Map<String, org.neo4j.graphdb.Node>) globalMap.get("<%=cachedNodeSource%>_CACHED_NODE"); 
	    		<%
    		}
    	} else {
    		%>
			org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = (org.neo4j.graphdb.GraphDatabaseService) globalMap.get("<%=dbconn%>");
			<%
    	}
		%>
	<%
    } else {
    	boolean remoteServer = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOTE_SERVER__"));
    	if (remoteServer) {
    		String serverUrl = ElementParameterParser.getValue(node, "__SERVER_URL__");
    		%>
    		org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = new org.neo4j.rest.graphdb.RestGraphDatabase(<%=serverUrl%>);
    		<%
    	} else {
	    	String databasePath = ElementParameterParser.getValue(node, "__DATABASE_PATH__");
			%>
			org.neo4j.graphdb.GraphDatabaseService databaseService_<%=cid%> = new org.neo4j.kernel.EmbeddedGraphDatabase(<%=databasePath%>);
			<%
		}
    }
    // Index configuration
    for (String indexName : indexNames) {
    	%>
    	org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> indexNode_<%=indexName%> = databaseService_<%=cid%>.index().forNodes("<%=indexName%>");
    	<%
    }
    // Auto index configuration
    if (autoIndexedColumns.size() > 0) {
    	%>
    	org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer = databaseService_<%=cid%>.index().getNodeAutoIndexer();
    	autoIndexer.setEnabled(true);
    	<%
    }
    for (String autoIndexedColumn : autoIndexedColumns) {
		%>
		autoIndexer.startAutoIndexingProperty("<%=autoIndexedColumn%>");
		<%
	}
%>	
org.neo4j.graphdb.Transaction tx = databaseService_<%=cid%>.beginTx();
int nb_line_<%=cid %> = 0;
long counter = 0;